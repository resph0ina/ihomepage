/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class PhotoService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public PhotoService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 上传照片至用户相册。此接口需要采用multipart/form-data的编码方式。
     * @param albumId 相册ID,albumId省略时会上传到应用相册
     * @param description 照片描述。不能超过200个字符
     * @param file 照片
     * @return Photo 照片
     * @throws   RennException 
     * PHOTO_FORMAT_NOT_SUPPORT 照片格式不正确，支持：image/bmp,image/png,image/gif,image/jpeg,image/jpg。 
     * PHOTO_DESCRIPTION_TOO_LONG 照片描述不能超过200个字符。 
     * ALBUM_NOT_EXIST 相册不存在。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PHOTO_INPUT_DENY 抱歉，某些信息是不能发布的哦：）谢谢您的谅解。 
     * PHOTO_AMOUNT_EXCEEDS_THE_LIMIT 相册容纳照片数量超过限制（1000张）。 
     */
    public Photo uploadPhoto (Long  albumId, String  description, File file) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (albumId != null) {
            textParams.put("albumId", RennParam.asString(albumId));
        }
        if (description != null) {
	    textParams.put("description", description);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        fileParams.put("file", file);
        RennRequest request = new RennRequest("/v2/photo/upload", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Photo)mapper.mapCommon(response.getResponse().toString(), Photo.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取某个用户某个相册里的某张照片
     * @param albumId 相册的ID
     * @param photoId 照片的ID
     * @param ownerId 相册所有者的ID
     * @param password 相册的密码
     * @return Photo 照片
     * @throws   RennException 
     * NO_RIGHT 您没有权限获取此照片。 
     * PHOTO_NOT_EXIST 照片不存在。 
     * ALBUM_NOT_EXIST 相册不存在。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PASSWORD_PROTECTED 相册是密码保护的，请输入正确密码再获取。 
     */
    public Photo getPhoto (Long  albumId, Long  photoId, Long  ownerId, String  password) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (albumId != null) {
            textParams.put("albumId", RennParam.asString(albumId));
        }
        if (photoId != null) {
            textParams.put("photoId", RennParam.asString(photoId));
        }
        if (ownerId != null) {
            textParams.put("ownerId", RennParam.asString(ownerId));
        }
        if (password != null) {
	    textParams.put("password", password);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/photo/get", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Photo)mapper.mapCommon(response.getResponse().toString(), Photo.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 以分页的方式获取某个用户某个相册里的照片列表
     * @param albumId 相册的ID
     * @param ownerId 相册所有者的ID
     * @param pageSize 页面大小。取值范围1-100，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @param password 相册的密码，
     * @return Photo 照片
     * @throws   RennException 
     * NO_RIGHT 您没有权限获取此照片列表。 
     * ALBUM_NOT_EXIST 相册不存在。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PASSWORD_PROTECTED 相册是密码保护的，请输入正确密码再获取。 
     * PAGE_SIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public Photo [] listPhoto (Long  albumId, Long  ownerId, Integer  pageSize, Integer  pageNumber, String  password) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (albumId != null) {
            textParams.put("albumId", RennParam.asString(albumId));
        }
        if (ownerId != null) {
            textParams.put("ownerId", RennParam.asString(ownerId));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        if (password != null) {
	    textParams.put("password", password);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/photo/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Photo [])mapper.mapCommon(response.getResponse().toString(), Photo.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
