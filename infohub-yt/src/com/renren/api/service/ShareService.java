/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class ShareService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public ShareService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 分享人人网内部UGC资源，例如：日志、照片、相册、分享(基于已有分享再次进行分享）
     * @param ugcOwnerId UGC所有者的用户ID
     * @param comment 分享时用户的评论，评论字数不能超过500字符
     * @param ugcId UGC的ID
     * @param ugcType UGC的类型。
     * @return Share 分享
     * @throws   RennException 
     * UGC_TYPE_ILLEGAL 不支持的分享类型。 
     * COMMENT_TOO_LONG 评论字数不能超过500个字符。 
     * UGC_OWNER_NOT_EXIST 分享的UGC所有者不存在。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * FAST_OPERATION 请不要频繁进行分享。 
     * NO_ACCESS 只有所有人可见才能被分享。 
     * CONTENT_PROHIBITED 抱歉，某些信息不能发布的哦：）谢谢您的谅解。 
     * UGC_NOT_EXIST 分享的UGC不存在。 
     */
    public Share putShareUgc (Long  ugcOwnerId, String  comment, Long  ugcId, UGCType  ugcType) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (ugcOwnerId != null) {
            textParams.put("ugcOwnerId", RennParam.asString(ugcOwnerId));
        }
        if (comment != null) {
	    textParams.put("comment", comment);
        }
        if (ugcId != null) {
            textParams.put("ugcId", RennParam.asString(ugcId));
        }
        if (ugcType != null) {
            textParams.put("ugcType", RennParam.asString(ugcType));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/share/ugc/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Share)mapper.mapCommon(response.getResponse().toString(), Share.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取人人推荐资源
     * @param pageSize 页面大小。取值范围1-50，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @param shareType 分享类型
     * @return Share 分享
     * @throws   RennException 
     * PAGESIZE_NOT_IN_RANGE 页面大小不在1-50范围内。 
     * FAST_OPERATION 您的操作过于频繁，请稍后再试。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     * SHARE_TYPE_ILLEGAL 不支持的热门分享类型。 
     */
    public Share [] listShareHot (Integer  pageSize, Integer  pageNumber, ShareType  shareType) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        if (shareType != null) {
            textParams.put("shareType", RennParam.asString(shareType));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/share/hot/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Share [])mapper.mapCommon(response.getResponse().toString(), Share.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 分享人人网外部资源，例如：视频、图片等<br> 如果要分享一张本地照片到人人网（即上传），建议使用[http://wiki.dev.renren.com/wiki/v2/photo/upload /v2/photo/upload]接口
     * @param comment 分享时用户的评论，评论字数不能超过500个字符
     * @param url 分享资源的URL
     * @return Share 分享
     * @throws   RennException 
     * OPERATION_NOT_SUPPORT 不支持的分享链接。 
     * COMMENT_TOO_LONG 评论字数不能超过500个字符。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * FAST_OPERATION 请不要频繁进行分享。 
     * INTERNAL_NOT_SUPPORT 不支持分享站内资源。 
     * CONTENT_PROHIBITED 抱歉，某些信息不能发布的哦：）谢谢您的谅解。 
     */
    public Share putShareUrl (String  comment, String  url) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (comment != null) {
	    textParams.put("comment", comment);
        }
        if (url != null) {
	    textParams.put("url", url);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/share/url/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Share)mapper.mapCommon(response.getResponse().toString(), Share.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 获取某个用户的某个分享
     * @param shareId 分享ID
     * @param ownerId 分享所有者ID
     * @return Share 分享
     * @throws   RennException 
     * SHARE_NOT_EXIST 分享不存在。 
     */
    public Share getShare (Long  shareId, Long  ownerId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (shareId != null) {
            textParams.put("shareId", RennParam.asString(shareId));
        }
        if (ownerId != null) {
            textParams.put("ownerId", RennParam.asString(ownerId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/share/get", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Share)mapper.mapCommon(response.getResponse().toString(), Share.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 以分页的方式获取某个用户的分享列表
     * @param ownerId 分享所有者ID
     * @param pageSize 页面大小。取值范围1-100，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @return Share 分享
     * @throws   RennException 
     * SHARE_NOT_EXIST 用户已经没有分享可以显示。 
     * PAGE_SIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public Share [] listShare (Long  ownerId, Integer  pageSize, Integer  pageNumber) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (ownerId != null) {
            textParams.put("ownerId", RennParam.asString(ownerId));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/share/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Share [])mapper.mapCommon(response.getResponse().toString(), Share.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
