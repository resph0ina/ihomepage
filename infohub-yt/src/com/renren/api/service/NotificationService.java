/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class NotificationService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public NotificationService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 以用户身份向用户发送通知
     * @param content 通知的内容，可以是XNML类型的文本信息，支持的XNML有<xn:name/>和<a/>，请注意：使用<xn:name/>标签的时候，其uid属性值只能是真实的用户id（阿拉伯数字）。例如：hello,<xn:name uid="200032219" linked="true"/> ，去看看这部电影<a href="http://www.tudou.com/programs/view/Tzpw9PIj8zM/">狮子王</a>。通知长度不能大于500个字符
     * @param userIds 接收通知的用户列表。这些用户必须是当前登录用户的好友或应用安装用户。请确保一次传入的用户id数少于20个。不能给当前用户发送通知，发送的通知会被忽略
     * @return Integer 发送成功返回1
     * @throws   RennException 
     * NOTIFICATION_RECEIVERS_NULL 接收者列表不能为空。 
     * NOTIFICATION_TEXT_PROHIBITED 抱歉，某些信息不能发布的哦：）谢谢您的谅解。 
     * NOTIFICATION_ALL_RECEIVERS_NO_QUATO_TODAY 全部接收者超过接收配额(1条/每用户/每天)。 
     * NOTIFICATION_ALL_RECEIVERS_NOT_INSTALL_APP_OR_SENDER_FRIENDS 全部接收者都不是应用安装用户或发送者好友。 
     * NOTIFICATION_TEXT_TOO_LONG 通知长度不能大于500个字符。 
     * APP_NOTIFICATION_FORBIDDEN 应用没有发送通知的权限。 
     * NOTIFICATION_TEXT_INVALID 通知内容不合法. 
     * NOTIFICATION_RECEIVERIDS_TOO_MANY 接收者数量不能多于20。 
     * NOTIFICATION_SEND_NO_QUATO 发送通知超过配额。 
     */
    public Integer putNotificationUser (String  content, Long [] userIds) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (content != null) {
	    textParams.put("content", content);
        }
        if (userIds != null) {
            textParams.put("userIds", RennParam.asString(userIds));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/notification/user/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Integer)mapper.mapCommon(response.getResponse().toString(), Integer.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 以应用身份向用户发送通知
     * @param content 通知的内容，可以是XNML类型的文本信息，支持的XNML有<xn:name/>和<a/>，请注意：使用<xn:name/>标签的时候，其uid属性值只能是真实的用户id（阿拉伯数字）。例如：hello,<xn:name uid="200032219" linked="true"/> ，去看看这部电影<a href="http://www.tudou.com/programs/view/Tzpw9PIj8zM/">狮子王</a>。通知长度不能大于500个字符
     * @param userIds 接收通知的用户列表。这些用户必须安装了此应用。请确保一次传入的用户id数少于20个
     * @return Integer 发送成功返回1
     * @throws   RennException 
     * NOTIFICATION_TEXT_INVALID 通知内容不合法。 
     * NOTIFICATION_TEXT_PROHIBITED 抱歉，某些信息不能发布的哦：）谢谢您的谅解。 
     * NOTIFICATION_TEXT_TOO_LONG 通知内容不能超过500个字符。 
     * NOTIFICATION_RECEIVERS_NULL 通知接受者列表不能为空。 
     * NOTIFICATION_ALL_RECEIVERS_NO_QUATO_TODAY 全部接收者超过接收配额(1条/每用户/每天)。 
     * APP_NOTIFICATION_FORBIDDEN 应用没有发送通知的权限。 
     * NOTIFICATION_RECEIVERIDS_TOO_MANY 通知接收者不能超出20个。 
     * NOTIFICATION_ALL_RECEIVERS_NOT_INSTALL_APP 全部接收者都不是应用安装用户。 
     */
    public Integer putNotificationApp (String  content, Long [] userIds) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (content != null) {
	    textParams.put("content", content);
        }
        if (userIds != null) {
            textParams.put("userIds", RennParam.asString(userIds));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/notification/app/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Integer)mapper.mapCommon(response.getResponse().toString(), Integer.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
