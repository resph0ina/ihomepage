/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class FeedService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public FeedService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 发送自定义新鲜事。新鲜事会发布用户的个人动态信息到用户人人网主页，<br> 同时会出现在好友的新鲜事中。
     * @param message 用户输入的自定义内容。注意：最多200个字符
     * @param title 新鲜事标题 注意：最多30个字符
     * @param actionTargetUrl 新鲜事动作模块链接
     * @param imageUrl 新鲜事图片地址
     * @param description 新鲜事主体内容 注意：最多200个字符。
     * @param subtitle 新鲜事副标题 注意：最多20个字符
     * @param actionName 新鲜事动作模块文案。 注意：最多10个字符
     * @param targetUrl 新鲜事标题和图片指向的链接
     * @return Long 发布新鲜事的ID
     * @throws   RennException 
     * FEED_PARAM_DESCRIPTION_EMPTY 新鲜事描述不能为空。 
     * FEED_PARAM_DESCRIPTION_TOO_LONG 新鲜事描述长度不能超过200个字符。 
     * FEED_PARAM_TARGETURL_EMPTY 新鲜事标题和图片指向的链接不能为空。 
     * FEED_PARAM_ACTIONTARGETURL_INVALID 新鲜事动作文案的链接不是一个合法的url。 
     * FEED_PARAM_TARGETURL_INVALID 新鲜事标题和图片指向的链接不是一个合法的url。 
     * FEED_PARAM_MESSAGE_PROHIBITED 用户输入的自定义内容包含违禁信息。 
     * FEED_PARAM_TARGETURL_PROHIBITED 新鲜事标题和图片指向的链接包含违禁信息。 
     * FEED_PUBLISH_QUOTA_LIMIT_REACHEL 发送新鲜事超过配额。 
     * FEED_PARAM_ACTIONNAME_PROHIBITED 新鲜事动作模块文案包含违禁信息。 
     * FEED_PARAM_MESSAGE_EMPTY 用户输入的自定义内容不能为空。 
     * FEED_PARAM_TITLE_TOO_LONG 新鲜事标题长度不能超过30个字符。 
     * FEED_PARAM_ACTIONTARGETURL_PROHIBITED 新鲜事动作模块链接包含违禁信息。 
     * FEED_PARAM_DESCRIPTION_PROHIBITED 新鲜事描述包含违禁信息。 
     * FEED_PARAM_MESSAGE_TOO_LONG 用户输入的自定义内容不能超过200个字符。 
     * FEED_PARAM_IMAGEURL_INVALID 新鲜事图片链接不是一个合法的url。 
     * FEED_PARAM_TITLE_PROHIBITED 新鲜事标题包含违禁信息。 
     * FEED_PARAM_TITLE_EMPTY 新鲜事标题不能为空。 
     * FEED_PARAM_SUBTITLE_TOO_LONG 新鲜事副标题长度不能超过20个字符。 
     * FEED_PARAM_SUBTITLE_PROHIBITED 新鲜事副标题包含违禁信息。 
     * FEED_PARAM_IMAGEURL_PROHIBITED 新鲜事图片地址包含违禁信息。 
     * FEED_PARAM_ACTIONNAME_TOO_LONG 新鲜事动作文案长度不能超过10个字符。 
     */
    public Long putFeed (String  message, String  title, String  actionTargetUrl, String  imageUrl, String  description, String  subtitle, String  actionName, String  targetUrl) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (message != null) {
	    textParams.put("message", message);
        }
        if (title != null) {
	    textParams.put("title", title);
        }
        if (actionTargetUrl != null) {
	    textParams.put("actionTargetUrl", actionTargetUrl);
        }
        if (imageUrl != null) {
	    textParams.put("imageUrl", imageUrl);
        }
        if (description != null) {
	    textParams.put("description", description);
        }
        if (subtitle != null) {
	    textParams.put("subtitle", subtitle);
        }
        if (actionName != null) {
	    textParams.put("actionName", actionName);
        }
        if (targetUrl != null) {
	    textParams.put("targetUrl", targetUrl);
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/feed/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Long)mapper.mapCommon(response.getResponse().toString(), Long.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 根据新鲜事类型获取新鲜事列表
     * @param feedType 新鲜事类型
     * @param userId 用户id,不传时表示获取当前用户人人网首页新鲜事，否则获取对应用户的个人主页新鲜事
     * @param pageSize 页面大小。取值范围1-100，默认大小30
     * @param pageNumber 页数，取值大于0，默认值为1
     * @return Feed 新鲜事
     * @throws   RennException 
     * internal_error.SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * NO_RIGHT 没有权限访问新鲜事列表 
     * USER_NOT_EXIST 用户不存在。 
     * PAGE_SIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public Feed [] listFeed (FeedType [] feedType, Long  userId, Integer  pageSize, Integer  pageNumber) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (feedType != null) {
            textParams.put("feedType", RennParam.asString(feedType));
        }
        if (userId != null) {
            textParams.put("userId", RennParam.asString(userId));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/feed/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Feed [])mapper.mapCommon(response.getResponse().toString(), Feed.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
