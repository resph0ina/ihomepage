/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class PlaceService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public PlaceService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 通过地点获取新鲜事。
     * @param placeId 地点ID。
     * @param pageSize 页面大小。取值范围1-100，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @param locationFeedType 新鲜事类型。
     * @return LocationFeed 地点新鲜事
     * @throws   RennException 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PAGESIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * FEED_TYPE_ILLEGAL 地点新鲜事类型不合法。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public LocationFeed [] listPlaceFeed (String  placeId, Integer  pageSize, Integer  pageNumber, LocationFeedType  locationFeedType) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (placeId != null) {
	    textParams.put("placeId", placeId);
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        if (locationFeedType != null) {
            textParams.put("locationFeedType", RennParam.asString(locationFeedType));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/place/feed/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (LocationFeed [])mapper.mapCommon(response.getResponse().toString(), LocationFeed.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 根据经纬度获取地点列表。
     * @param pageSize 页面大小。取值范围1-100，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @param placeName 地点名称。
     * @param radius 半径,500-2000米。
     * @param longitude 经度。
     * @param deflection 是否偏转。
     * @param latitude 纬度。
     * @return Place 地点信息
     * @throws   RennException 
     * LATITUDE_NOT_IN_RANGE 纬度不在-90-90范围内。 
     * LONGITUDE_NOT_IN_RANGE 经度不在-180-180范围内。 
     * RADIUS_NOT_IN_RANGE 半径不在500-2000米范围内。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PAGESIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public Place [] listPlace (Integer  pageSize, Integer  pageNumber, String  placeName, Integer  radius, Double  longitude, Boolean  deflection, Double  latitude) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        if (placeName != null) {
	    textParams.put("placeName", placeName);
        }
        if (radius != null) {
            textParams.put("radius", RennParam.asString(radius));
        }
        if (longitude != null) {
            textParams.put("longitude", RennParam.asString(longitude));
        }
        if (deflection != null) {
            textParams.put("deflection", RennParam.asString(deflection));
        }
        if (latitude != null) {
            textParams.put("latitude", RennParam.asString(latitude));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/place/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Place [])mapper.mapCommon(response.getResponse().toString(), Place.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
