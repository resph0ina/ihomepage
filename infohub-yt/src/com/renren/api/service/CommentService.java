/**
 * Autogenerated by renren-api2-generator 2013-07-05 11:01:59
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.renren.api.service;

import java.io.File;
import java.util.*;

import com.renren.api.AccessToken;
import com.renren.api.ObjectMappingException;
import com.renren.api.RennException;
import com.renren.api.RennExecutor;
import com.renren.api.RennParam;
import com.renren.api.RennRequest;
import com.renren.api.RennRequest.Method;
import com.renren.api.RennResponse;
import com.renren.api.mapper.JsonMappingException;
import com.renren.api.mapper.ObjectMapper;

public class CommentService {
	private RennExecutor executor;

    private AccessToken token;

    private ObjectMapper mapper;
	
    /**
     * @param executor
     * @param token
     * @param mapper
     */
    public CommentService(RennExecutor executor, AccessToken token, ObjectMapper mapper) {
        super();
        this.executor = executor;
        this.token = token;
        this.mapper = mapper;
    }

    /**
     * 对某个对象（日志、状态、照片、相册、分享等）进行评论
     * @param content 评论内容。状态评论字数限制为240个字符，其余字数限制为500个字符。
     * @param targetUserId 评论回复目标用户的ID，若为0或不传此参数为：添加一条评论
     * @param commentType 评论的类型
     * @param entryOwnerId 评论对象所有者的ID
     * @param entryId 被评论对象的ID
     * @return Comment 评论
     * @throws   RennException 
     * CAN_NOT_REPLY_SELF 不能在评论中回复自己。 
     * INVALID_ENTRYTYPE commentType不合法。 
     * COMMENT_NOT_NULL 评论内容不能为空。 
     * COMMENT_TOO_LONG 评论内容不能长于500个字符。 
     * CAN_NOT_REPLY 不能回复未发表评论的用户。 
     * ENTRY_NOT_EXIST 被评论对象不存在。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * NO_RIGHT 由于对方隐私设置，无法进行评论。 
     * STATUS_COMMENT_TOO_LONG 状态评论内容不能长于240个字符。 
     * COMMENT_PROHIBITED 抱歉，某些信息不能发布的哦：）谢谢您的谅解。 
     * FAST_RATE_COUNT 评论过于频繁，请稍后再试。 
     * OVER_COMMENTS_COUNT_LIMIT 您的评论次数已超过限制。 
     */
    public Comment putComment(String  content, Long  targetUserId, CommentType  commentType, Long  entryOwnerId, Long  entryId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (content != null) {
	    textParams.put("content", content);
        }
        if (targetUserId != null) {
            textParams.put("targetUserId", RennParam.asString(targetUserId));
        }
        if (commentType != null) {
            textParams.put("commentType", RennParam.asString(commentType));
        }
        if (entryOwnerId != null) {
            textParams.put("entryOwnerId", RennParam.asString(entryOwnerId));
        }
        if (entryId != null) {
            textParams.put("entryId", RennParam.asString(entryId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/comment/put", Method.POST, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Comment)mapper.mapCommon(response.getResponse().toString(), Comment.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
    /**
     * 以分页的方式获取某个UGC的评论
     * @param desc 是否降序。true：按评论时间降序；false：按评论时间升序；默认:true,按评论时间降序。
     * @param pageSize 页面大小。取值范围1-100，默认大小20
     * @param pageNumber 页码。取值大于零，默认值为1
     * @param commentType 评论的类型
     * @param entryOwnerId 评论对象所有者的ID
     * @param entryId 被评论对象的ID
     * @return Comment 评论
     * @throws   RennException 
     * ENTRY_NOT_EXIST 被评论资源不存在。 
     * INVALID_ENTRYTYPE commentType不合法。 
     * NO_RIGHT 由于对方隐私设置，无法获取评论。 
     * SERVICE_BUSY 服务器繁忙，请稍后再试。 
     * PAGESIZE_NOT_IN_RANGE 页面大小不在1-100范围内。 
     * PAGE_NUMBER_MUST_LARGER_0 页码必须大于0。 
     */
    public Comment [] listComment (Boolean  desc, Integer  pageSize, Integer  pageNumber, CommentType  commentType, Long  entryOwnerId, Long  entryId) throws RennException {
        Map<String, String> textParams = new HashMap<String, String>();
        if (desc != null) {
            textParams.put("desc", RennParam.asString(desc));
        }
        if (pageSize != null) {
            textParams.put("pageSize", RennParam.asString(pageSize));
        }
        if (pageNumber != null) {
            textParams.put("pageNumber", RennParam.asString(pageNumber));
        }
        if (commentType != null) {
            textParams.put("commentType", RennParam.asString(commentType));
        }
        if (entryOwnerId != null) {
            textParams.put("entryOwnerId", RennParam.asString(entryOwnerId));
        }
        if (entryId != null) {
            textParams.put("entryId", RennParam.asString(entryId));
        }
        Map<String, String> bodyParams = new HashMap<String, String>();
        Map<String, File> fileParams = new HashMap<String, File>();
        RennRequest request = new RennRequest("/v2/comment/list", Method.GET, textParams, bodyParams, fileParams, token);
        RennResponse response = executor.execute(request);
        try {
            return (Comment [])mapper.mapCommon(response.getResponse().toString(), Comment.class);
        } catch (JsonMappingException e) {
            throw new ObjectMappingException();
        }
    }
}
